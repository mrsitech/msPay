Microserviços
Isolar os diferentes Services( regras de negocio: Cart/order/payment). Teoricamente, com DBs individuais.
Esses diferentes services se comunicam via API Getway
TIPOS:
Data service( acesso direto ao DB, sem regras)
Business service (Datas services, com services)
Translation service (Business services de acesso a 3eiros)
Edge service (Exposições de serviços baseado no perfil do cliente)

Padroes de Organizaçao
Não MS: pacote por recursos( 1 pacote para pagamentos/pedidos/restaurantes, e cada um desses possuem - 1 controler, repositore, etc)

Sim MS:Packege by Layer( como o codigo é separado por recursos, os pacotes são : controler, repositore, etc)


Boas Práticas em Rest
Nomes de endPoints 
 Java = getAllCars , verbo de ações
 Url =  cars , recursos a ser acessado.

Use os subrecursos
 Se um subrecurso ( ex placa de carro) só é possivel para caro, que ele seja um sub recurso de cars
 ex acessando uma placa de carro
 NAO FAZER get /771/placa/5
 Sim, Fazer get /cars/771/placas/5
 
Cabeçalho de HTTP 
	sempre colocar no cabeçalho o tipo de retorno esperado ( Json,http,etc)
	É interessante colocar no cabeçalho os caches possiveis com os tempos que o cache pode ser mantido de acordo com a idempotencia ( get ), ou em caso contrario de que NÃO pode fazer 
	
	EM caso de requisição, forneça as URL e os meios de interação possivel com a API.
	{ "Cursos:[{"id":1,"nome":"AsAopou","links":[
		{"type":"GET", "rel"":"cursos_1292", "uri": "api.treinamentoweb.com/cursos/2/aulas"},
		{"type":"GET", "rel"":"anotações", "uri": "api.treinamentoweb.com/cursos/2/"},
		{"type":"DELETE", "rel"":"cursos_exclusao", "uri": "api.treinamentoweb.com/cursos_antigos/2/aulas"}}]}
		
		
		
API deve ser flexivel. Conter ao menos:

filtro: carros pela cor
GET /cars?color=red
ou
GET /cars?seats<=2

Ordenação: carros pela placa de forma crescente
GET /cars?sort=-placas

Campos
GET /cars?fields=,manufacturer,model,color,id
GET /cars?offset=10&limit=5

Paginação, com link de navegação no cabeçalho:
Link:
<https://blog.mwsol.com/sample/api/v1/cars?offset=15&limit=5>; rel="next", <https://blog.mwsol.com/sample/api/v1/cars?offset=50&limit=3>; rel="last", <https://blog.mwsol.com/sample/api/v1/cars?offset=0$limit=5>; rel="first", <https://blog.mwsol.com/sample/api/v1/cars?offset=5$limit=5>; rel="prev";


Versione a API pela URL: mudei de cars para automotores
https://blog.mwsol.com/sample/api/v1/cars?offset=15$limit=5
https://blog.mwsol.com/sample/api/v1/automotores?offset=15$limit=5


HTTP status codes correto
1xx informational
2XX success
3XX redirection
4xx client error
5XX server error

Annotations
Separar as classes do projeto de acordo com as responsabilidades (package by layer), nomeando os pacotes de forma intuitiva, como model, repository, service, controller;

Criar a classe que irá representar a tabela pagamentos no banco de dados, para isso utilizamos a dependência @Entity para que a JPA consiga fazer a relação entre a tabela e a entidade;

Usar a anotação @Table para indicar o nome da tabela no banco de dados;

Usar as anotações do lombok para não precisar escrever os construtores, getters e setters das classes. Essas anotações foram: @AllArgsConstructor, @NoArgsConstructors, @Getters, @Setters;

Usar as anotações de validação dos dados, para definir tamanhos mínimos e máximos dos campos, obrigatoriedade ou não de inclusão, entre outras. Essas anotações foram: @NotBlank, @NotNull, @Size, @Positive;

Usar as anotações do lombok para não precisar escrever os construtores, getters e setters das classes. Essas anotações foram: @AllArgsConstructor, @NoArgsConstructors, @Getters, @Setters;
Criar um tipo enumerado (Enum) para representar o Status do pedido, onde separamos em criado, confirmado e cancelado;

Criar uma interface herdando da JPA Repository, para já termos os métodos básicos que utilizaremos em nosso CRUD implementados, como findAll, findById, save, etc;
Criar uma classe com o padrão DTO para flexibilizar e/ou restringir os atributos que serão recebidos ou devolvidos pela API;

Separar a regra de negócio e o acesso ao repositório numa classe separada, denominada classe de serviço (Service);

Usar a dependência do ModelMapper para converter os dados do model para o DTO e vice versa;
Criar a classe que irá atuar com controlador (ou Controller) e usar a anotação @RestController para indicar que estamos construindo um controlador para uma API REST e o caminho/rota que deverá ser digitada para chegar nesse ponto;

Implementar os métodos anotando de acordo com o tipo da requisição http recebida @GetMapping, @PostMapping, @PutMapping e @DeleteMapping;

Usar as anotações @PathVariable, para indicar ao Spring que deve atribuir à variável o valor que estamos enviando como parâmetro no endereço da requisição e @RequestBody para indicar é para atribuir à variável o conteúdo que estamos enviando dados no corpo da requisição.


